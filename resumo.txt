
instalar o angular
sudo npm install -g @angular/cli ou @angular/cli@1.6.4

ver a versão do angular
ng --version

sudo npm install rxjs-compat --save

criando um novo projeto
ng new sistema-ponto-eletronico-app

inicializando o projeto
cd sistema-ponto-eletronico-app
ng serve --aot

acessando o projeto
http://localhost:4200/

Angular Material
https://material.angular.io/
https://material.angular.io/guide/getting-started
https://material.angular.io/components/categories

Na raiz do projeto
instalar dependencias
sudo npm install --save @angular/material @angular/cdk @angular/animations hammerjs @angular/flex-layout


configurar o app.module.ts para acrescentar o component de button
https://material.angular.io/components/button/api

configurar hammerjs no main.ts para que o Material funcione

configurar um theme css para que o Material possa funcionar adequadamente
importando o comando abaixo para o styles.css
@import "@angular/material/prebuilt-themes/indigo-pink.css";

importando fonts do google-api no header do index.html
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

criando o modulo de autenticação
ng g module autenticacao/login

ao criar um novo modulo, importar e declarar no app.module.ts

criar um arquivo index.ts para importar em niveis os modulos

criar o componente na raiz da aplicacao

criando um arquivo de rotas
ng g class app-routing.module

criar um arquivo de rota para o login
ng g class autenticacao/login/login-routing.module

criar um component como porta de entrada para o sistema
ng g class autenticacao/login/components/logar.component
ng g component autenticacao/login/components/login


AppRoutingModule é um singleton, uma unica classe para toda a aplicação criando uma arvore para as outras rotas

http://localhost:4200
http://localhost:4200/login


criar um service para acessar a api
ng g service autenticacao/login/services/login
** services sempre precisam ser registrados nos .modules par serem disponibilizados, injetados
e carregados, nesse caso será registrado no login.modules.ts, como ele é um service precisa ser declarado como um provider

criando modulo de cadastro-pj
ng g module autenticacao/cadastro-pj

criando um componente para o modulo cadastro-pj
ng g component autenticacao/cadastro-pj/components/cadastrar-pj
criar index.ts na raiz do cadastrar-pj para exportar o component e do components para exportar o cadastrar-pj e no cadastro-pj para exportar o modulo e no index da autenticacao incluir o diretorio cadastro-pj de no modulo principal(app.module.ts) acrescentar o CadastroPjModule 


criar um component que será um wrapper para o component de cadastropj
dentro de cadastro-pj/components/ cadastro-pj.component.ts

declarar o cadastro-pj.component.ts dentro do index.ts do components

criar o arquivo de rota especifico para este component/modulo, dentro do diretorio raiz do cadastro-pj
cadastro-pj.routing.module.ts

declarar o routing module no arquivo index.ts do diretorio em que ele foi criado, import também esse diretório no app.module.ts no mesmo recurso de /autenticacao



criar modulo shared na raiz do projeto
ng g module shared

importar o SharedModule para o CadastroPjModule

criar diretiva para mask
ng g directive shared/directives/mask

para que essa diretiva possa ser utilizada, em shared.module.ts acrescente em @NgModule({...., exports: [MaskDirective]})


criar service para o cadastro-pj
ng g service autenticacao/cadastro-pj/services/cadastro-pj
registrar esse service no cadastroPjModule


******* sempre registrar o service no modulo principal do modulo
ex. cadastro-pf.module.ts

instalar lib no projeto angular
npm install moment --save

criar pipe
ng g pipe shared/pipes/tipo

criando o modulo de admin
ng g module admin

criando o component de listagem para o admin
ng g component admin/components/listagem

ng g component admin/components/cadastro

ng g component admin/components/atualizacao














